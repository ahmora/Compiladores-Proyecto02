Starting parse
Entering state 0
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0
Entering state 3
Reducing stack by rule 2 (line 62):
   $1 = nterm epsilon ()
-> $$ = nterm filein ()
Stack now 0
Entering state 2
Reading a token: Next token is token DEF ()
Shifting token DEF ()
Entering state 18
Reading a token: Next token is token NAME ()
Shifting token NAME ()
Entering state 65
Reading a token: Next token is token OPENPAR ()
Shifting token OPENPAR ()
Entering state 116
Reading a token: Next token is token NAME ()
Shifting token NAME ()
Entering state 166
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 116 166
Entering state 209
Reducing stack by rule 167 (line 1080):
   $1 = nterm epsilon ()
-> $$ = nterm args_kleene ()
Stack now 0 2 18 65 116 166
Entering state 210
Reading a token: Next token is token CLOSEPAR ()
Reducing stack by rule 165 (line 1058):
   $1 = token NAME ()
   $2 = nterm args_kleene ()
-> $$ = nterm varargslist ()
Stack now 0 2 18 65 116
Entering state 168
Next token is token CLOSEPAR ()
Shifting token CLOSEPAR ()
Entering state 211
Reducing stack by rule 164 (line 1048):
   $1 = token OPENPAR ()
   $2 = nterm varargslist ()
   $3 = token CLOSEPAR ()
-> $$ = nterm parameters ()
Stack now 0 2 18 65
Entering state 117
Reading a token: Next token is token TWODOTS ()
Shifting token TWODOTS ()
Entering state 169
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 170
Reading a token: Next token is token INDENT ()
Shifting token INDENT ()
Entering state 213
Reading a token: Next token is token PRINT ()
Shifting token PRINT ()
Entering state 23
Reading a token: Next token is token STRING ()
Shifting token STRING ()
Entering state 7
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 111 (line 621):
   $1 = token STRING ()
-> $$ = nterm string_plus ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 43
Reducing stack by rule 102 (line 584):
   $1 = nterm string_plus ()
-> $$ = nterm atom ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 18 65 117 169 170 213 23 41
Entering state 108
Next token is token NEWLINE ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 18 65 117 169 170 213 23 39
Entering state 106
Next token is token NEWLINE ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 18 65 117 169 170 213 23 38
Entering state 104
Next token is token NEWLINE ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 18 65 117 169 170 213 23 37
Entering state 102
Next token is token NEWLINE ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 18 65 117 169 170 213 23 36
Entering state 100
Next token is token NEWLINE ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 18 65 117 169 170 213 23 35
Entering state 98
Next token is token NEWLINE ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 18 65 117 169 170 213 23 34
Entering state 96
Next token is token NEWLINE ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 18 65 117 169 170 213 23 33
Entering state 94
Next token is token NEWLINE ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 18 65 117 169 170 213 23 31
Entering state 92
Next token is token NEWLINE ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 18 65 117 169 170 213 23 30
Entering state 90
Next token is token NEWLINE ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 29
Next token is token NEWLINE ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 70
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 70
Entering state 111
Reducing stack by rule 150 (line 947):
   $1 = nterm epsilon ()
-> $$ = nterm comma_test_kleene ()
Stack now 0 2 18 65 117 169 170 213 23 70
Entering state 120
Next token is token NEWLINE ()
Reducing stack by rule 149 (line 933):
   $1 = nterm test ()
   $2 = nterm comma_test_kleene ()
-> $$ = nterm print_args ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 71
Reducing stack by rule 147 (line 917):
   $1 = token PRINT ()
   $2 = nterm print_args ()
-> $$ = nterm print_stmt ()
Stack now 0 2 18 65 117 169 170 213
Entering state 52
Reducing stack by rule 138 (line 809):
   $1 = nterm print_stmt ()
-> $$ = nterm small_stmt ()
Stack now 0 2 18 65 117 169 170 213
Entering state 50
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 50
Entering state 109
Reducing stack by rule 136 (line 797):
   $1 = nterm epsilon ()
-> $$ = nterm small_stmt_kleene ()
Stack now 0 2 18 65 117 169 170 213 50
Entering state 110
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 159
Reducing stack by rule 134 (line 777):
   $1 = nterm small_stmt ()
   $2 = nterm small_stmt_kleene ()
   $3 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Stack now 0 2 18 65 117 169 170 213
Entering state 49
Reducing stack by rule 131 (line 763):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2 18 65 117 169 170 213
Entering state 235
Reducing stack by rule 130 (line 755):
   $1 = nterm stmt ()
-> $$ = nterm stmt_plus ()
Stack now 0 2 18 65 117 169 170 213
Entering state 234
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 13
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 161 (line 1021):
   $1 = token RETURN ()
-> $$ = nterm return_stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 56
Reducing stack by rule 157 (line 998):
   $1 = nterm return_stmt ()
-> $$ = nterm flow_stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 53
Reducing stack by rule 139 (line 815):
   $1 = nterm flow_stmt ()
-> $$ = nterm small_stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 50
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 50
Entering state 109
Reducing stack by rule 136 (line 797):
   $1 = nterm epsilon ()
-> $$ = nterm small_stmt_kleene ()
Stack now 0 2 18 65 117 169 170 213 234 50
Entering state 110
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 159
Reducing stack by rule 134 (line 777):
   $1 = nterm small_stmt ()
   $2 = nterm small_stmt_kleene ()
   $3 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 49
Reducing stack by rule 131 (line 763):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 252
Reducing stack by rule 129 (line 733):
   $1 = nterm stmt_plus ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_plus ()
Stack now 0 2 18 65 117 169 170 213
Entering state 234
Reading a token: Next token is token DEDENT ()
Shifting token DEDENT ()
Entering state 251
Reducing stack by rule 128 (line 730):
   $1 = token NEWLINE ()
   $2 = token INDENT ()
   $3 = nterm stmt_plus ()
   $4 = token DEDENT ()
-> $$ = nterm suite ()
Stack now 0 2 18 65 117 169
Entering state 212
Reducing stack by rule 162 (line 1029):
   $1 = token DEF ()
   $2 = token NAME ()
   $3 = nterm parameters ()
   $4 = token TWODOTS ()
   $5 = nterm suite ()
-> $$ = nterm funcdef ()
Stack now 0 2
Entering state 57
Reducing stack by rule 118 (line 641):
   $1 = nterm funcdef ()
-> $$ = nterm compound_stmt ()
Stack now 0 2
Entering state 44
Reducing stack by rule 132 (line 764):
   $1 = nterm compound_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2
Entering state 48
Reducing stack by rule 4 (line 72):
   $1 = nterm filein ()
   $2 = nterm stmt ()
-> $$ = nterm filein ()
Stack now 0
Entering state 2
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 9
Reducing stack by rule 3 (line 68):
   $1 = nterm filein ()
   $2 = token NEWLINE ()
-> $$ = nterm filein ()
Stack now 0
Entering state 2
Reading a token: Next token is token DEF ()
Shifting token DEF ()
Entering state 18
Reading a token: Next token is token NAME ()
Shifting token NAME ()
Entering state 65
Reading a token: Next token is token OPENPAR ()
Shifting token OPENPAR ()
Entering state 116
Reading a token: Next token is token CLOSEPAR ()
Shifting token CLOSEPAR ()
Entering state 167
Reducing stack by rule 163 (line 1043):
   $1 = token OPENPAR ()
   $2 = token CLOSEPAR ()
-> $$ = nterm parameters ()
Stack now 0 2 18 65
Entering state 117
Reading a token: Next token is token TWODOTS ()
Shifting token TWODOTS ()
Entering state 169
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 170
Reading a token: Next token is token INDENT ()
Shifting token INDENT ()
Entering state 213
Reading a token: Next token is token PRINT ()
Shifting token PRINT ()
Entering state 23
Reading a token: Next token is token STRING ()
Shifting token STRING ()
Entering state 7
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 111 (line 621):
   $1 = token STRING ()
-> $$ = nterm string_plus ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 43
Reducing stack by rule 102 (line 584):
   $1 = nterm string_plus ()
-> $$ = nterm atom ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 18 65 117 169 170 213 23 41
Entering state 108
Next token is token NEWLINE ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 18 65 117 169 170 213 23 39
Entering state 106
Next token is token NEWLINE ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 18 65 117 169 170 213 23 38
Entering state 104
Next token is token NEWLINE ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 18 65 117 169 170 213 23 37
Entering state 102
Next token is token NEWLINE ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 18 65 117 169 170 213 23 36
Entering state 100
Next token is token NEWLINE ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 18 65 117 169 170 213 23 35
Entering state 98
Next token is token NEWLINE ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 18 65 117 169 170 213 23 34
Entering state 96
Next token is token NEWLINE ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 18 65 117 169 170 213 23 33
Entering state 94
Next token is token NEWLINE ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 18 65 117 169 170 213 23 31
Entering state 92
Next token is token NEWLINE ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 18 65 117 169 170 213 23 30
Entering state 90
Next token is token NEWLINE ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 29
Next token is token NEWLINE ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 70
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 23 70
Entering state 111
Reducing stack by rule 150 (line 947):
   $1 = nterm epsilon ()
-> $$ = nterm comma_test_kleene ()
Stack now 0 2 18 65 117 169 170 213 23 70
Entering state 120
Next token is token NEWLINE ()
Reducing stack by rule 149 (line 933):
   $1 = nterm test ()
   $2 = nterm comma_test_kleene ()
-> $$ = nterm print_args ()
Stack now 0 2 18 65 117 169 170 213 23
Entering state 71
Reducing stack by rule 147 (line 917):
   $1 = token PRINT ()
   $2 = nterm print_args ()
-> $$ = nterm print_stmt ()
Stack now 0 2 18 65 117 169 170 213
Entering state 52
Reducing stack by rule 138 (line 809):
   $1 = nterm print_stmt ()
-> $$ = nterm small_stmt ()
Stack now 0 2 18 65 117 169 170 213
Entering state 50
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 50
Entering state 109
Reducing stack by rule 136 (line 797):
   $1 = nterm epsilon ()
-> $$ = nterm small_stmt_kleene ()
Stack now 0 2 18 65 117 169 170 213 50
Entering state 110
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 159
Reducing stack by rule 134 (line 777):
   $1 = nterm small_stmt ()
   $2 = nterm small_stmt_kleene ()
   $3 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Stack now 0 2 18 65 117 169 170 213
Entering state 49
Reducing stack by rule 131 (line 763):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2 18 65 117 169 170 213
Entering state 235
Reducing stack by rule 130 (line 755):
   $1 = nterm stmt ()
-> $$ = nterm stmt_plus ()
Stack now 0 2 18 65 117 169 170 213
Entering state 234
Reading a token: Next token is token NAME ()
Shifting token NAME ()
Entering state 8
Reducing stack by rule 105 (line 587):
   $1 = token NAME ()
-> $$ = nterm atom ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 18 65 117 169 170 213 234 41
Entering state 108
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 18 65 117 169 170 213 234 39
Entering state 106
Next token is token ASSIGN ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 18 65 117 169 170 213 234 38
Entering state 104
Next token is token ASSIGN ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 18 65 117 169 170 213 234 37
Entering state 102
Next token is token ASSIGN ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 18 65 117 169 170 213 234 36
Entering state 100
Next token is token ASSIGN ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 18 65 117 169 170 213 234 35
Entering state 98
Next token is token ASSIGN ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 18 65 117 169 170 213 234 34
Entering state 96
Next token is token ASSIGN ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 18 65 117 169 170 213 234 33
Entering state 94
Next token is token ASSIGN ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 18 65 117 169 170 213 234 31
Entering state 92
Next token is token ASSIGN ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 18 65 117 169 170 213 234 30
Entering state 90
Next token is token ASSIGN ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 29
Next token is token ASSIGN ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 28
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 81
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 6
Reducing stack by rule 107 (line 599):
   $1 = token INTEGER ()
-> $$ = nterm atom ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 41
Entering state 108
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 39
Entering state 106
Next token is token NEWLINE ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 38
Entering state 104
Next token is token NEWLINE ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 37
Entering state 102
Next token is token NEWLINE ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 36
Entering state 100
Next token is token NEWLINE ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 35
Entering state 98
Next token is token NEWLINE ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 34
Entering state 96
Next token is token NEWLINE ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 33
Entering state 94
Next token is token NEWLINE ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 31
Entering state 92
Next token is token NEWLINE ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 18 65 117 169 170 213 234 28 81 30
Entering state 90
Next token is token NEWLINE ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 29
Next token is token NEWLINE ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2 18 65 117 169 170 213 234 28 81
Entering state 127
Reducing stack by rule 142 (line 862):
   $1 = token ASSIGN ()
   $2 = nterm test ()
-> $$ = nterm expr_stmt_at ()
Stack now 0 2 18 65 117 169 170 213 234 28
Entering state 86
Reducing stack by rule 140 (line 825):
   $1 = nterm test ()
   $2 = nterm expr_stmt_at ()
-> $$ = nterm expr_stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 51
Reducing stack by rule 137 (line 803):
   $1 = nterm expr_stmt ()
-> $$ = nterm small_stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 50
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 50
Entering state 109
Reducing stack by rule 136 (line 797):
   $1 = nterm epsilon ()
-> $$ = nterm small_stmt_kleene ()
Stack now 0 2 18 65 117 169 170 213 234 50
Entering state 110
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 159
Reducing stack by rule 134 (line 777):
   $1 = nterm small_stmt ()
   $2 = nterm small_stmt_kleene ()
   $3 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 49
Reducing stack by rule 131 (line 763):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 252
Reducing stack by rule 129 (line 733):
   $1 = nterm stmt_plus ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_plus ()
Stack now 0 2 18 65 117 169 170 213
Entering state 234
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 13
Reading a token: Next token is token NAME ()
Shifting token NAME ()
Entering state 8
Reducing stack by rule 105 (line 587):
   $1 = token NAME ()
-> $$ = nterm atom ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 13 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 18 65 117 169 170 213 234 13 41
Entering state 108
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 13 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 18 65 117 169 170 213 234 13 39
Entering state 106
Next token is token NEWLINE ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 13 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 18 65 117 169 170 213 234 13 38
Entering state 104
Next token is token NEWLINE ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 13 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 18 65 117 169 170 213 234 13 37
Entering state 102
Next token is token NEWLINE ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 13 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 18 65 117 169 170 213 234 13 36
Entering state 100
Next token is token NEWLINE ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 13 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 18 65 117 169 170 213 234 13 35
Entering state 98
Next token is token NEWLINE ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 13 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 18 65 117 169 170 213 234 13 34
Entering state 96
Next token is token NEWLINE ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 13 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 18 65 117 169 170 213 234 13 33
Entering state 94
Next token is token NEWLINE ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 13 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 18 65 117 169 170 213 234 13 31
Entering state 92
Next token is token NEWLINE ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 13 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 18 65 117 169 170 213 234 13 30
Entering state 90
Next token is token NEWLINE ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 29
Next token is token NEWLINE ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 61
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 13 61
Entering state 111
Reducing stack by rule 150 (line 947):
   $1 = nterm epsilon ()
-> $$ = nterm comma_test_kleene ()
Stack now 0 2 18 65 117 169 170 213 234 13 61
Entering state 112
Next token is token NEWLINE ()
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 13 61 112
Entering state 162
Reducing stack by rule 152 (line 966):
   $1 = nterm epsilon ()
-> $$ = nterm comma_one ()
Stack now 0 2 18 65 117 169 170 213 234 13 61 112
Entering state 163
Reducing stack by rule 154 (line 970):
   $1 = nterm test ()
   $2 = nterm comma_test_kleene ()
   $3 = nterm comma_one ()
-> $$ = nterm testlist ()
Stack now 0 2 18 65 117 169 170 213 234 13
Entering state 62
Reducing stack by rule 160 (line 1015):
   $1 = token RETURN ()
   $2 = nterm testlist ()
-> $$ = nterm return_stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 56
Reducing stack by rule 157 (line 998):
   $1 = nterm return_stmt ()
-> $$ = nterm flow_stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 53
Reducing stack by rule 139 (line 815):
   $1 = nterm flow_stmt ()
-> $$ = nterm small_stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 50
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 18 65 117 169 170 213 234 50
Entering state 109
Reducing stack by rule 136 (line 797):
   $1 = nterm epsilon ()
-> $$ = nterm small_stmt_kleene ()
Stack now 0 2 18 65 117 169 170 213 234 50
Entering state 110
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 159
Reducing stack by rule 134 (line 777):
   $1 = nterm small_stmt ()
   $2 = nterm small_stmt_kleene ()
   $3 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 49
Reducing stack by rule 131 (line 763):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2 18 65 117 169 170 213 234
Entering state 252
Reducing stack by rule 129 (line 733):
   $1 = nterm stmt_plus ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_plus ()
Stack now 0 2 18 65 117 169 170 213
Entering state 234
Reading a token: Next token is token DEDENT ()
Shifting token DEDENT ()
Entering state 251
Reducing stack by rule 128 (line 730):
   $1 = token NEWLINE ()
   $2 = token INDENT ()
   $3 = nterm stmt_plus ()
   $4 = token DEDENT ()
-> $$ = nterm suite ()
Stack now 0 2 18 65 117 169
Entering state 212
Reducing stack by rule 162 (line 1029):
   $1 = token DEF ()
   $2 = token NAME ()
   $3 = nterm parameters ()
   $4 = token TWODOTS ()
   $5 = nterm suite ()
-> $$ = nterm funcdef ()
Stack now 0 2
Entering state 57
Reducing stack by rule 118 (line 641):
   $1 = nterm funcdef ()
-> $$ = nterm compound_stmt ()
Stack now 0 2
Entering state 44
Reducing stack by rule 132 (line 764):
   $1 = nterm compound_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2
Entering state 48
Reducing stack by rule 4 (line 72):
   $1 = nterm filein ()
   $2 = nterm stmt ()
-> $$ = nterm filein ()
Stack now 0
Entering state 2
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 9
Reducing stack by rule 3 (line 68):
   $1 = nterm filein ()
   $2 = token NEWLINE ()
-> $$ = nterm filein ()
Stack now 0
Entering state 2
Reading a token: Next token is token PRINT ()
Shifting token PRINT ()
Entering state 23
Reading a token: Next token is token NAME ()
Shifting token NAME ()
Entering state 8
Reducing stack by rule 105 (line 587):
   $1 = token NAME ()
-> $$ = nterm atom ()
Stack now 0 2 23
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 23 41
Entering state 108
Reading a token: Next token is token OPENPAR ()
Shifting token OPENPAR ()
Entering state 156
Reading a token: Next token is token INTEGER ()
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41 108 156
Entering state 196
Reducing stack by rule 66 (line 476):
   $1 = nterm epsilon ()
-> $$ = nterm argument_comma ()
Stack now 0 2 23 41 108 156
Entering state 198
Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 6
Reducing stack by rule 107 (line 599):
   $1 = token INTEGER ()
-> $$ = nterm atom ()
Stack now 0 2 23 41 108 156 198
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41 108 156 198 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 23 41 108 156 198 41
Entering state 108
Reading a token: Next token is token CLOSEPAR ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 23 41 108 156 198
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 23 41 108 156 198
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41 108 156 198 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 23 41 108 156 198 39
Entering state 106
Next token is token CLOSEPAR ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 23 41 108 156 198
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41 108 156 198 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 23 41 108 156 198 38
Entering state 104
Next token is token CLOSEPAR ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2 23 41 108 156 198
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41 108 156 198 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 23 41 108 156 198 37
Entering state 102
Next token is token CLOSEPAR ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2 23 41 108 156 198
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41 108 156 198 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 23 41 108 156 198 36
Entering state 100
Next token is token CLOSEPAR ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2 23 41 108 156 198
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41 108 156 198 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 23 41 108 156 198 35
Entering state 98
Next token is token CLOSEPAR ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2 23 41 108 156 198
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41 108 156 198 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 23 41 108 156 198 34
Entering state 96
Next token is token CLOSEPAR ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2 23 41 108 156 198
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41 108 156 198 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 23 41 108 156 198 33
Entering state 94
Next token is token CLOSEPAR ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2 23 41 108 156 198
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2 23 41 108 156 198
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41 108 156 198 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 23 41 108 156 198 31
Entering state 92
Next token is token CLOSEPAR ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2 23 41 108 156 198
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41 108 156 198 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 23 41 108 156 198 30
Entering state 90
Next token is token CLOSEPAR ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2 23 41 108 156 198
Entering state 29
Next token is token CLOSEPAR ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2 23 41 108 156 198
Entering state 221
Next token is token CLOSEPAR ()
Reducing stack by rule 75 (line 505):
   $1 = nterm test ()
-> $$ = nterm argument ()
Stack now 0 2 23 41 108 156 198
Entering state 223
Next token is token CLOSEPAR ()
Reducing stack by rule 68 (line 493):
   $1 = nterm argument ()
-> $$ = nterm argument_multiple ()
Stack now 0 2 23 41 108 156 198
Entering state 222
Reducing stack by rule 65 (line 465):
   $1 = nterm argument_comma ()
   $2 = nterm argument_multiple ()
-> $$ = nterm arglist ()
Stack now 0 2 23 41 108 156
Entering state 197
Next token is token CLOSEPAR ()
Shifting token CLOSEPAR ()
Entering state 218
Reducing stack by rule 62 (line 454):
   $1 = token OPENPAR ()
   $2 = nterm arglist ()
   $3 = token CLOSEPAR ()
-> $$ = nterm trailer ()
Stack now 0 2 23 41 108
Entering state 158
Reducing stack by rule 60 (line 449):
   $1 = nterm trailer_kleene ()
   $2 = nterm trailer ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 23 41
Entering state 108
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 23
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 23
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 23 39
Entering state 106
Next token is token NEWLINE ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 23
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 23 38
Entering state 104
Next token is token NEWLINE ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2 23
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 23 37
Entering state 102
Next token is token NEWLINE ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2 23
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 23 36
Entering state 100
Next token is token NEWLINE ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2 23
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 23 35
Entering state 98
Next token is token NEWLINE ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2 23
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 23 34
Entering state 96
Next token is token NEWLINE ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2 23
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 23 33
Entering state 94
Next token is token NEWLINE ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2 23
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2 23
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 23 31
Entering state 92
Next token is token NEWLINE ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2 23
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 23 30
Entering state 90
Next token is token NEWLINE ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2 23
Entering state 29
Next token is token NEWLINE ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2 23
Entering state 70
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 70
Entering state 111
Reducing stack by rule 150 (line 947):
   $1 = nterm epsilon ()
-> $$ = nterm comma_test_kleene ()
Stack now 0 2 23 70
Entering state 120
Next token is token NEWLINE ()
Reducing stack by rule 149 (line 933):
   $1 = nterm test ()
   $2 = nterm comma_test_kleene ()
-> $$ = nterm print_args ()
Stack now 0 2 23
Entering state 71
Reducing stack by rule 147 (line 917):
   $1 = token PRINT ()
   $2 = nterm print_args ()
-> $$ = nterm print_stmt ()
Stack now 0 2
Entering state 52
Reducing stack by rule 138 (line 809):
   $1 = nterm print_stmt ()
-> $$ = nterm small_stmt ()
Stack now 0 2
Entering state 50
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 50
Entering state 109
Reducing stack by rule 136 (line 797):
   $1 = nterm epsilon ()
-> $$ = nterm small_stmt_kleene ()
Stack now 0 2 50
Entering state 110
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 159
Reducing stack by rule 134 (line 777):
   $1 = nterm small_stmt ()
   $2 = nterm small_stmt_kleene ()
   $3 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Stack now 0 2
Entering state 49
Reducing stack by rule 131 (line 763):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2
Entering state 48
Reducing stack by rule 4 (line 72):
   $1 = nterm filein ()
   $2 = nterm stmt ()
-> $$ = nterm filein ()
Stack now 0
Entering state 2
Reading a token: Next token is token PRINT ()
Shifting token PRINT ()
Entering state 23
Reading a token: Next token is token NAME ()
Shifting token NAME ()
Entering state 8
Reducing stack by rule 105 (line 587):
   $1 = token NAME ()
-> $$ = nterm atom ()
Stack now 0 2 23
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 23 41
Entering state 108
Reading a token: Next token is token OPENPAR ()
Shifting token OPENPAR ()
Entering state 156
Reading a token: Next token is token CLOSEPAR ()
Shifting token CLOSEPAR ()
Entering state 195
Reducing stack by rule 61 (line 453):
   $1 = token OPENPAR ()
   $2 = token CLOSEPAR ()
-> $$ = nterm trailer ()
Stack now 0 2 23 41 108
Entering state 158
Reducing stack by rule 60 (line 449):
   $1 = nterm trailer_kleene ()
   $2 = nterm trailer ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 23 41
Entering state 108
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 23
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 23
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 23 39
Entering state 106
Next token is token NEWLINE ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 23
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 23 38
Entering state 104
Next token is token NEWLINE ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2 23
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 23 37
Entering state 102
Next token is token NEWLINE ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2 23
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 23 36
Entering state 100
Next token is token NEWLINE ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2 23
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 23 35
Entering state 98
Next token is token NEWLINE ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2 23
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 23 34
Entering state 96
Next token is token NEWLINE ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2 23
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 23 33
Entering state 94
Next token is token NEWLINE ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2 23
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2 23
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 23 31
Entering state 92
Next token is token NEWLINE ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2 23
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 23 30
Entering state 90
Next token is token NEWLINE ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2 23
Entering state 29
Next token is token NEWLINE ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2 23
Entering state 70
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 23 70
Entering state 111
Reducing stack by rule 150 (line 947):
   $1 = nterm epsilon ()
-> $$ = nterm comma_test_kleene ()
Stack now 0 2 23 70
Entering state 120
Next token is token NEWLINE ()
Reducing stack by rule 149 (line 933):
   $1 = nterm test ()
   $2 = nterm comma_test_kleene ()
-> $$ = nterm print_args ()
Stack now 0 2 23
Entering state 71
Reducing stack by rule 147 (line 917):
   $1 = token PRINT ()
   $2 = nterm print_args ()
-> $$ = nterm print_stmt ()
Stack now 0 2
Entering state 52
Reducing stack by rule 138 (line 809):
   $1 = nterm print_stmt ()
-> $$ = nterm small_stmt ()
Stack now 0 2
Entering state 50
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 50
Entering state 109
Reducing stack by rule 136 (line 797):
   $1 = nterm epsilon ()
-> $$ = nterm small_stmt_kleene ()
Stack now 0 2 50
Entering state 110
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 159
Reducing stack by rule 134 (line 777):
   $1 = nterm small_stmt ()
   $2 = nterm small_stmt_kleene ()
   $3 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Stack now 0 2
Entering state 49
Reducing stack by rule 131 (line 763):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2
Entering state 48
Reducing stack by rule 4 (line 72):
   $1 = nterm filein ()
   $2 = nterm stmt ()
-> $$ = nterm filein ()
Stack now 0
Entering state 2
Reading a token: Next token is token NAME ()
Shifting token NAME ()
Entering state 8
Reducing stack by rule 105 (line 587):
   $1 = token NAME ()
-> $$ = nterm atom ()
Stack now 0 2
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 41
Entering state 108
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 39
Entering state 106
Next token is token ASSIGN ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 38
Entering state 104
Next token is token ASSIGN ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 37
Entering state 102
Next token is token ASSIGN ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 36
Entering state 100
Next token is token ASSIGN ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 35
Entering state 98
Next token is token ASSIGN ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 34
Entering state 96
Next token is token ASSIGN ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 33
Entering state 94
Next token is token ASSIGN ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 31
Entering state 92
Next token is token ASSIGN ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 30
Entering state 90
Next token is token ASSIGN ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2
Entering state 29
Next token is token ASSIGN ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2
Entering state 28
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 81
Reading a token: Next token is token FLOATNUMBER ()
Shifting token FLOATNUMBER ()
Entering state 5
Reducing stack by rule 106 (line 594):
   $1 = token FLOATNUMBER ()
-> $$ = nterm atom ()
Stack now 0 2 28 81
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 28 81 41
Entering state 108
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 28 81
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 28 81
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 28 81 39
Entering state 106
Next token is token NEWLINE ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 28 81
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 28 81 38
Entering state 104
Next token is token NEWLINE ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2 28 81
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 28 81 37
Entering state 102
Next token is token NEWLINE ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2 28 81
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 28 81 36
Entering state 100
Next token is token NEWLINE ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2 28 81
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 28 81 35
Entering state 98
Next token is token NEWLINE ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2 28 81
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 28 81 34
Entering state 96
Next token is token NEWLINE ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2 28 81
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 28 81 33
Entering state 94
Next token is token NEWLINE ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2 28 81
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2 28 81
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 28 81 31
Entering state 92
Next token is token NEWLINE ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2 28 81
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 28 81 30
Entering state 90
Next token is token NEWLINE ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2 28 81
Entering state 29
Next token is token NEWLINE ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2 28 81
Entering state 127
Reducing stack by rule 142 (line 862):
   $1 = token ASSIGN ()
   $2 = nterm test ()
-> $$ = nterm expr_stmt_at ()
Stack now 0 2 28
Entering state 86
Reducing stack by rule 140 (line 825):
   $1 = nterm test ()
   $2 = nterm expr_stmt_at ()
-> $$ = nterm expr_stmt ()
Stack now 0 2
Entering state 51
Reducing stack by rule 137 (line 803):
   $1 = nterm expr_stmt ()
-> $$ = nterm small_stmt ()
Stack now 0 2
Entering state 50
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 50
Entering state 109
Reducing stack by rule 136 (line 797):
   $1 = nterm epsilon ()
-> $$ = nterm small_stmt_kleene ()
Stack now 0 2 50
Entering state 110
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 159
Reducing stack by rule 134 (line 777):
   $1 = nterm small_stmt ()
   $2 = nterm small_stmt_kleene ()
   $3 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Stack now 0 2
Entering state 49
Reducing stack by rule 131 (line 763):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2
Entering state 48
Reducing stack by rule 4 (line 72):
   $1 = nterm filein ()
   $2 = nterm stmt ()
-> $$ = nterm filein ()
Stack now 0
Entering state 2
Reading a token: Next token is token NAME ()
Shifting token NAME ()
Entering state 8
Reducing stack by rule 105 (line 587):
   $1 = token NAME ()
-> $$ = nterm atom ()
Stack now 0 2
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 41
Entering state 108
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 39
Entering state 106
Next token is token ASSIGN ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 38
Entering state 104
Next token is token ASSIGN ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 37
Entering state 102
Next token is token ASSIGN ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 36
Entering state 100
Next token is token ASSIGN ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 35
Entering state 98
Next token is token ASSIGN ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 34
Entering state 96
Next token is token ASSIGN ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 33
Entering state 94
Next token is token ASSIGN ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 31
Entering state 92
Next token is token ASSIGN ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 30
Entering state 90
Next token is token ASSIGN ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2
Entering state 29
Next token is token ASSIGN ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2
Entering state 28
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 81
Reading a token: Next token is token STRING ()
Shifting token STRING ()
Entering state 7
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 111 (line 621):
   $1 = token STRING ()
-> $$ = nterm string_plus ()
Stack now 0 2 28 81
Entering state 43
Reducing stack by rule 102 (line 584):
   $1 = nterm string_plus ()
-> $$ = nterm atom ()
Stack now 0 2 28 81
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 28 81 41
Entering state 108
Next token is token NEWLINE ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 28 81
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 28 81
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 28 81 39
Entering state 106
Next token is token NEWLINE ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 28 81
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 28 81 38
Entering state 104
Next token is token NEWLINE ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2 28 81
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 28 81 37
Entering state 102
Next token is token NEWLINE ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2 28 81
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 28 81 36
Entering state 100
Next token is token NEWLINE ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2 28 81
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 28 81 35
Entering state 98
Next token is token NEWLINE ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2 28 81
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 28 81 34
Entering state 96
Next token is token NEWLINE ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2 28 81
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 28 81 33
Entering state 94
Next token is token NEWLINE ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2 28 81
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2 28 81
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 28 81 31
Entering state 92
Next token is token NEWLINE ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2 28 81
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 28 81 30
Entering state 90
Next token is token NEWLINE ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2 28 81
Entering state 29
Next token is token NEWLINE ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2 28 81
Entering state 127
Reducing stack by rule 142 (line 862):
   $1 = token ASSIGN ()
   $2 = nterm test ()
-> $$ = nterm expr_stmt_at ()
Stack now 0 2 28
Entering state 86
Reducing stack by rule 140 (line 825):
   $1 = nterm test ()
   $2 = nterm expr_stmt_at ()
-> $$ = nterm expr_stmt ()
Stack now 0 2
Entering state 51
Reducing stack by rule 137 (line 803):
   $1 = nterm expr_stmt ()
-> $$ = nterm small_stmt ()
Stack now 0 2
Entering state 50
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 50
Entering state 109
Reducing stack by rule 136 (line 797):
   $1 = nterm epsilon ()
-> $$ = nterm small_stmt_kleene ()
Stack now 0 2 50
Entering state 110
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 159
Reducing stack by rule 134 (line 777):
   $1 = nterm small_stmt ()
   $2 = nterm small_stmt_kleene ()
   $3 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Stack now 0 2
Entering state 49
Reducing stack by rule 131 (line 763):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2
Entering state 48
Reducing stack by rule 4 (line 72):
   $1 = nterm filein ()
   $2 = nterm stmt ()
-> $$ = nterm filein ()
Stack now 0
Entering state 2
Reading a token: Next token is token NAME ()
Shifting token NAME ()
Entering state 8
Reducing stack by rule 105 (line 587):
   $1 = token NAME ()
-> $$ = nterm atom ()
Stack now 0 2
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 41
Entering state 108
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 39
Entering state 106
Next token is token ASSIGN ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 38
Entering state 104
Next token is token ASSIGN ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 37
Entering state 102
Next token is token ASSIGN ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 36
Entering state 100
Next token is token ASSIGN ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 35
Entering state 98
Next token is token ASSIGN ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 34
Entering state 96
Next token is token ASSIGN ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 33
Entering state 94
Next token is token ASSIGN ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 31
Entering state 92
Next token is token ASSIGN ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 30
Entering state 90
Next token is token ASSIGN ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2
Entering state 29
Next token is token ASSIGN ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2
Entering state 28
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 81
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 6
Reducing stack by rule 107 (line 599):
   $1 = token INTEGER ()
-> $$ = nterm atom ()
Stack now 0 2 28 81
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 28 81 41
Entering state 108
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 28 81
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 28 81
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 28 81 39
Entering state 106
Next token is token NEWLINE ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 28 81
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 28 81 38
Entering state 104
Next token is token NEWLINE ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2 28 81
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 28 81 37
Entering state 102
Next token is token NEWLINE ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2 28 81
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 28 81 36
Entering state 100
Next token is token NEWLINE ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2 28 81
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 28 81 35
Entering state 98
Next token is token NEWLINE ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2 28 81
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 28 81 34
Entering state 96
Next token is token NEWLINE ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2 28 81
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 28 81 33
Entering state 94
Next token is token NEWLINE ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2 28 81
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2 28 81
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 28 81 31
Entering state 92
Next token is token NEWLINE ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2 28 81
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 28 81 30
Entering state 90
Next token is token NEWLINE ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2 28 81
Entering state 29
Next token is token NEWLINE ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2 28 81
Entering state 127
Reducing stack by rule 142 (line 862):
   $1 = token ASSIGN ()
   $2 = nterm test ()
-> $$ = nterm expr_stmt_at ()
Stack now 0 2 28
Entering state 86
Reducing stack by rule 140 (line 825):
   $1 = nterm test ()
   $2 = nterm expr_stmt_at ()
-> $$ = nterm expr_stmt ()
Stack now 0 2
Entering state 51
Reducing stack by rule 137 (line 803):
   $1 = nterm expr_stmt ()
-> $$ = nterm small_stmt ()
Stack now 0 2
Entering state 50
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 50
Entering state 109
Reducing stack by rule 136 (line 797):
   $1 = nterm epsilon ()
-> $$ = nterm small_stmt_kleene ()
Stack now 0 2 50
Entering state 110
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 159
Reducing stack by rule 134 (line 777):
   $1 = nterm small_stmt ()
   $2 = nterm small_stmt_kleene ()
   $3 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Stack now 0 2
Entering state 49
Reducing stack by rule 131 (line 763):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2
Entering state 48
Reducing stack by rule 4 (line 72):
   $1 = nterm filein ()
   $2 = nterm stmt ()
-> $$ = nterm filein ()
Stack now 0
Entering state 2
Reading a token: Next token is token NAME ()
Shifting token NAME ()
Entering state 8
Reducing stack by rule 105 (line 587):
   $1 = token NAME ()
-> $$ = nterm atom ()
Stack now 0 2
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 41
Entering state 108
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 39
Entering state 106
Next token is token ASSIGN ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 38
Entering state 104
Next token is token ASSIGN ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 37
Entering state 102
Next token is token ASSIGN ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 36
Entering state 100
Next token is token ASSIGN ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 35
Entering state 98
Next token is token ASSIGN ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 34
Entering state 96
Next token is token ASSIGN ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 33
Entering state 94
Next token is token ASSIGN ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 31
Entering state 92
Next token is token ASSIGN ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 30
Entering state 90
Next token is token ASSIGN ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2
Entering state 29
Next token is token ASSIGN ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2
Entering state 28
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 81
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 6
Reducing stack by rule 107 (line 599):
   $1 = token INTEGER ()
-> $$ = nterm atom ()
Stack now 0 2 28 81
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 28 81 41
Entering state 108
Reading a token: Next token is token MAS ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 28 81
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 28 81
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 28 81 39
Entering state 106
Next token is token MAS ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 28 81
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 28 81 38
Entering state 104
Next token is token MAS ()
Shifting token MAS ()
Entering state 148
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 6
Reducing stack by rule 107 (line 599):
   $1 = token INTEGER ()
-> $$ = nterm atom ()
Stack now 0 2 28 81 38 104 148
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 38 104 148 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 28 81 38 104 148 41
Entering state 108
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 28 81 38 104 148
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 28 81 38 104 148
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 38 104 148 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 28 81 38 104 148 39
Entering state 106
Next token is token NEWLINE ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 28 81 38 104 148
Entering state 187
Reducing stack by rule 45 (line 316):
   $1 = nterm sign_term ()
   $2 = token MAS ()
   $3 = nterm term ()
-> $$ = nterm sign_term ()
Stack now 0 2 28 81 38
Entering state 104
Next token is token NEWLINE ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2 28 81
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 28 81 37
Entering state 102
Next token is token NEWLINE ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2 28 81
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 28 81 36
Entering state 100
Next token is token NEWLINE ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2 28 81
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 28 81 35
Entering state 98
Next token is token NEWLINE ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2 28 81
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 28 81 34
Entering state 96
Next token is token NEWLINE ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2 28 81
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 28 81 33
Entering state 94
Next token is token NEWLINE ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2 28 81
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2 28 81
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 28 81 31
Entering state 92
Next token is token NEWLINE ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2 28 81
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 28 81 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 28 81 30
Entering state 90
Next token is token NEWLINE ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2 28 81
Entering state 29
Next token is token NEWLINE ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2 28 81
Entering state 127
Reducing stack by rule 142 (line 862):
   $1 = token ASSIGN ()
   $2 = nterm test ()
-> $$ = nterm expr_stmt_at ()
Stack now 0 2 28
Entering state 86
Reducing stack by rule 140 (line 825):
   $1 = nterm test ()
   $2 = nterm expr_stmt_at ()
-> $$ = nterm expr_stmt ()
Stack now 0 2
Entering state 51
Reducing stack by rule 137 (line 803):
   $1 = nterm expr_stmt ()
-> $$ = nterm small_stmt ()
Stack now 0 2
Entering state 50
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 50
Entering state 109
Reducing stack by rule 136 (line 797):
   $1 = nterm epsilon ()
-> $$ = nterm small_stmt_kleene ()
Stack now 0 2 50
Entering state 110
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 159
Reducing stack by rule 134 (line 777):
   $1 = nterm small_stmt ()
   $2 = nterm small_stmt_kleene ()
   $3 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Stack now 0 2
Entering state 49
Reducing stack by rule 131 (line 763):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Stack now 0 2
Entering state 48
Reducing stack by rule 4 (line 72):
   $1 = nterm filein ()
   $2 = nterm stmt ()
-> $$ = nterm filein ()
Stack now 0
Entering state 2
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 6
Reducing stack by rule 107 (line 599):
   $1 = token INTEGER ()
-> $$ = nterm atom ()
Stack now 0 2
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 41
Entering state 108
Reading a token: Next token is token MAS ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 39
Entering state 106
Next token is token MAS ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2
Entering state 38
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 38
Entering state 103
Reducing stack by rule 44 (line 315):
   $1 = nterm epsilon ()
-> $$ = nterm sign_term ()
Stack now 0 2 38
Entering state 104
Next token is token MAS ()
Shifting token MAS ()
Entering state 148
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 6
Reducing stack by rule 107 (line 599):
   $1 = token INTEGER ()
-> $$ = nterm atom ()
Stack now 0 2 38 104 148
Entering state 41
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 38 104 148 41
Entering state 107
Reducing stack by rule 59 (line 448):
   $1 = nterm epsilon ()
-> $$ = nterm trailer_kleene ()
Stack now 0 2 38 104 148 41
Entering state 108
Reading a token: Next token is token NEWLINE ()
Reducing stack by rule 57 (line 425):
   $1 = nterm atom ()
   $2 = nterm trailer_kleene ()
-> $$ = nterm power ()
Stack now 0 2 38 104 148
Entering state 40
Reducing stack by rule 56 (line 422):
   $1 = nterm power ()
-> $$ = nterm factor ()
Stack now 0 2 38 104 148
Entering state 39
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 38 104 148 39
Entering state 105
Reducing stack by rule 48 (line 368):
   $1 = nterm epsilon ()
-> $$ = nterm factor_operation ()
Stack now 0 2 38 104 148 39
Entering state 106
Next token is token NEWLINE ()
Reducing stack by rule 47 (line 347):
   $1 = nterm factor ()
   $2 = nterm factor_operation ()
-> $$ = nterm term ()
Stack now 0 2 38 104 148
Entering state 187
Reducing stack by rule 45 (line 316):
   $1 = nterm sign_term ()
   $2 = token MAS ()
   $3 = nterm term ()
-> $$ = nterm sign_term ()
Stack now 0 2 38
Entering state 104
Next token is token NEWLINE ()
Reducing stack by rule 43 (line 293):
   $1 = nterm term ()
   $2 = nterm sign_term ()
-> $$ = nterm arithmetic_expr ()
Stack now 0 2
Entering state 37
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 37
Entering state 101
Reducing stack by rule 40 (line 282):
   $1 = nterm epsilon ()
-> $$ = nterm leftright_shift_expr ()
Stack now 0 2 37
Entering state 102
Next token is token NEWLINE ()
Reducing stack by rule 39 (line 272):
   $1 = nterm arithmetic_expr ()
   $2 = nterm leftright_shift_expr ()
-> $$ = nterm shift_expr ()
Stack now 0 2
Entering state 36
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 36
Entering state 99
Reducing stack by rule 37 (line 262):
   $1 = nterm epsilon ()
-> $$ = nterm andpandshift_expr ()
Stack now 0 2 36
Entering state 100
Next token is token NEWLINE ()
Reducing stack by rule 36 (line 250):
   $1 = nterm shift_expr ()
   $2 = nterm andpandshift_expr ()
-> $$ = nterm and_expr ()
Stack now 0 2
Entering state 35
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 35
Entering state 97
Reducing stack by rule 34 (line 241):
   $1 = nterm epsilon ()
-> $$ = nterm andxor_expr ()
Stack now 0 2 35
Entering state 98
Next token is token NEWLINE ()
Reducing stack by rule 33 (line 229):
   $1 = nterm and_expr ()
   $2 = nterm andxor_expr ()
-> $$ = nterm xor_expr ()
Stack now 0 2
Entering state 34
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 34
Entering state 95
Reducing stack by rule 31 (line 220):
   $1 = nterm epsilon ()
-> $$ = nterm pipexor_expr ()
Stack now 0 2 34
Entering state 96
Next token is token NEWLINE ()
Reducing stack by rule 30 (line 208):
   $1 = nterm xor_expr ()
   $2 = nterm pipexor_expr ()
-> $$ = nterm expr ()
Stack now 0 2
Entering state 33
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 33
Entering state 93
Reducing stack by rule 18 (line 167):
   $1 = nterm epsilon ()
-> $$ = nterm comp_op_expr_kleene ()
Stack now 0 2 33
Entering state 94
Next token is token NEWLINE ()
Reducing stack by rule 16 (line 143):
   $1 = nterm expr ()
   $2 = nterm comp_op_expr_kleene ()
-> $$ = nterm comparison ()
Stack now 0 2
Entering state 32
Reducing stack by rule 15 (line 139):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Stack now 0 2
Entering state 31
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 31
Entering state 91
Reducing stack by rule 12 (line 124):
   $1 = nterm epsilon ()
-> $$ = nterm and_nottest ()
Stack now 0 2 31
Entering state 92
Next token is token NEWLINE ()
Reducing stack by rule 11 (line 112):
   $1 = nterm not_test ()
   $2 = nterm and_nottest ()
-> $$ = nterm and_test ()
Stack now 0 2
Entering state 30
Reducing stack by rule 5 (line 84):
-> $$ = nterm epsilon ()
Stack now 0 2 30
Entering state 89
Reducing stack by rule 9 (line 103):
   $1 = nterm epsilon ()
-> $$ = nterm or_andtest ()
Stack now 0 2 30
Entering state 90
Next token is token NEWLINE ()
Reducing stack by rule 8 (line 91):
   $1 = nterm and_test ()
   $2 = nterm or_andtest ()
-> $$ = nterm or_test ()
Stack now 0 2
Entering state 29
Next token is token NEWLINE ()
Reducing stack by rule 6 (line 87):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Stack now 0 2
Entering state 28
Next token is token NEWLINE ()
Error: popping nterm test ()
Stack now 0 2
Error: popping nterm filein ()
Stack now 0
Cleanup: discarding lookahead token NEWLINE ()
Stack now 0
